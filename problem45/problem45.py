"""
Problem 45

Triangle, pentagonal, and hexagonal numbers are generated by the following formulae:
Triangle
 
T_n=n(n+1)/2
 
1, 3, 6, 10, 15, ...
Pentagonal
 
P_n=n(3n - 1)/2
 
1, 5, 12, 22, 35, ...
Hexagonal
 
H_n=n(2n - 1)
 
1, 6, 15, 28, 45, ...
It can be verified that T_{285} = P_{165} = H_{143} = 40755.
Find the next triangle number that is also pentagonal and hexagonal.
"""
import math

def triangle(n):
    return n*(n+1)//2

def pentagonal(n):
    return n*(3*n-1)//2

def hexagonal(n):
    return n*(2*n-1)

def is_triangle(num):
    # 2*num = n*n + n
    # 0 = n*n + n - 2*num
    a,b,c = 1,1,-2*num
    term1 =math.sqrt(b*b - 4*a*c)
    if term1 != int(term1): return False

    x1 = (-b+term1)/ (2*a)
    # x2 = (-b-term1)/2a     # will always be negative,
    return x1 == int(x1)

def is_pentagon(num):
    # num = n*(3*n-1)//2
    # 0 = 3n^2 - n - num*2
    a,b,c = 3,-1,-num*2
    term1 =math.sqrt(b*b - 4*a*c)
    if term1 != int(term1): return False

    x1 = (-b+term1)/ (2*a)
    # x2 = (-b-term1)/2a     # will always be negative,
    return x1 == int(x1)

def is_hexagonal(num):

    # num = n*(2*n-1)
    # 0 = 2n^2 - n - num
    a,b,c = 2,-1,-num
    term1 =math.sqrt(b*b - 4*a*c)
    if term1 != int(term1): return False

    x1 = (-b+term1)/ (2*a)
    # x2 = (-b-term1)/2a     # will always be negative,
    return x1 == int(x1)

i = 286
num_found = False
while not num_found and i<1_000_000:
    if i%10_000 == 0: print('step:', i)
    num = triangle(i)
    if is_pentagon(num) and is_hexagonal(num):
        num_found=True
        print(num)
        break
    i+=1

# print(triangle(285))
# print(pentagonal(165))
# print(hexagonal(143))
